{"version":3,"file":"Cascade.js","sourceRoot":"","sources":["Cascade.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\nimport * as _ from \"lodash\";\nimport * as fs from \"fs-extra\";\nimport * as sanitize from \"sanitize-filename\";\nimport {EventEmitter} from \"events\";\n\nexport interface ComponentDefinition {\n    type?: \"BOOLEAN\" | \"NUMBER\" | \"STRING\";\n    id: string;\n    modbusAddress?: number;\n    readOnly?: boolean;\n    persist?: boolean;\n    name?: string;\n    description?: string;\n    units?: string;\n}\n\nexport class Component extends EventEmitter implements ComponentDefinition {\n\n    type: \"BOOLEAN\" | \"NUMBER\" | \"STRING\";\n    id: string;\n    modbusAddress: number;\n    readOnly: boolean;\n    persist: boolean;\n    name: string;\n    description: string;\n    units: string;\n    lastUpdated: Date;\n\n    private _value: any;\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        let oldValue = this._value;\n\n        if(this.type !== \"STRING\")\n        {\n            newValue = _.trim(newValue);\n        }\n\n        if(this.type === \"NUMBER\")\n        {\n            newValue = Number(newValue);\n        }\n        else if(this.type === \"BOOLEAN\")\n        {\n            newValue = (newValue === true || newValue === \"true\" || newValue === \"1\" || newValue === 1);\n        }\n\n        this._value = newValue;\n        this.lastUpdated = new Date();\n        this.emit(\"changed\", newValue, oldValue);\n\n        if(this.persist)\n        {\n            Cascade.storeValue(this.id, newValue, \"persistence\");\n        }\n    }\n\n    get secondsSinceLastUpdate():number\n    {\n        if(_.isNil(this.lastUpdated)) return -1;\n        return Math.floor((Date.now() - this.lastUpdated.getTime()) / 1000);\n    }\n\n    constructor(properties: ComponentDefinition) {\n        super();\n\n        _.defaults(this, properties, {\n            type: \"STRING\",\n            id: \"\",\n            readOnly: false,\n            persist: false\n        });\n\n        if(this.persist)\n        {\n            let storedValue = Cascade.getStoredValue(this.id, \"persistence\");\n            if(!_.isUndefined(storedValue))\n            {\n                this.value = storedValue;\n            }\n        }\n    }\n\n    serialized()\n    {\n        let result = _.pick(this, [\"type\", \"id\", \"modbusAddress\", \"readOnly\", \"persist\", \"name\", \"description\", \"units\", \"value\", \"secondsSinceLastUpdate\"]);\n\n        if(this.lastUpdated)\n        {\n            result.lastUpdated = this.lastUpdated.toISOString();\n        }\n\n        return result;\n    }\n}\n\nexport default class Cascade extends EventEmitter {\n    private static _loops = [];\n    private static _loopTimer;\n    static components = {};\n    static processes = {};\n\n    private static _beginLoops() {\n\n        if (Cascade._loopTimer) return;\n\n        Cascade._loopTimer = setInterval(() => {\n            for (let loop of Cascade._loops) {\n                loop();\n            }\n        }, 1000);\n    }\n\n    static requireProcess(processPath: string):any {\n        let fullPath = path.resolve(process.cwd(), processPath);\n\n        // If the file doesn't exist, are we referring to a built-in process?\n        let proc;\n        try\n        {\n            proc = require(fullPath);\n        }\n        catch(e)\n        {\n            if (!fs.existsSync(fullPath)) {\n                fullPath = path.resolve(path.join(__dirname, \"processes\"), processPath);\n            }\n\n            proc = require(fullPath);\n        }\n\n        if (!Cascade.processes[processPath]) {\n            Cascade.processes[processPath] = proc;\n            Cascade.logDebug(`Loaded process called \"${path.basename(processPath)}\"`);\n        }\n\n        Cascade._beginLoops();\n\n        return Cascade.processes[processPath];\n    }\n\n    static start(callback: () => void) {\n        if (callback) callback();\n        Cascade._beginLoops();\n    }\n\n    static loop(callback: () => void) {\n        Cascade._loops.push(callback);\n        Cascade._beginLoops();\n    }\n\n    static addComponent(properties: ComponentDefinition): Component {\n        let newComponent = new Component(properties);\n\n        if (Cascade.components[newComponent.id]) throw `A component with ID \"${newComponent.id}\" already exists`;\n\n        Cascade.components[newComponent.id] = newComponent;\n\n        Cascade.logDebug(`Added a component called \"${newComponent.id}\"`);\n\n        return newComponent;\n    }\n\n    static _processLog(level: \"debug\" | \"info\" | \"warning\" | \"error\", message: string) {\n        switch (level) {\n            case \"warning\": {\n                console.warn(message);\n                break;\n            }\n            case \"error\": {\n                console.error(message);\n                break;\n            }\n            case \"debug\":\n            default: {\n                console.log(message);\n            }\n        }\n    }\n\n    private static _getStoragePathForKey(key:string, root:string = \"\")\n    {\n        let rootPath = path.join(process.cwd(), path.join(process.env.DATA_PATH || \"./data\", root));\n        return path.join(rootPath, sanitize(key)) + \".json\";\n    }\n\n    static storeValue(key:string, value:any, root:string = \"\")\n    {\n        let keyPath = Cascade._getStoragePathForKey(key, root);\n\n        fs.outputJsonSync(keyPath, {\n            value: value\n        });\n    }\n\n    static getStoredValue(key:string, root:string = \"\"):any\n    {\n        let keyPath = Cascade._getStoragePathForKey(key, root);\n\n        try\n        {\n            let data = fs.readJsonSync(keyPath);\n            return data.value;\n        }\n        catch(e)\n        {\n        }\n    }\n\n    static logDebug(message: string) {\n        Cascade._processLog(\"debug\", message);\n    }\n\n    static logInfo(message: string) {\n        Cascade._processLog(\"info\", message);\n    }\n\n    static logWarning(message: string) {\n        Cascade._processLog(\"warning\", message);\n    }\n\n    static logError(message: string) {\n        Cascade._processLog(\"error\", message);\n    }\n}\n\nif (process.env.CASCADE_PROCESSES) {\n    let defaultProcesses = (process.env.CASCADE_PROCESSES).split(\",\");\n\n    if (defaultProcesses.length > 0) {\n        for (let defaultProcess of defaultProcesses) {\n            Cascade.requireProcess(defaultProcess);\n        }\n    }\n}"]}