{"version":3,"file":"WebAPI.js","sourceRoot":"","sources":["WebAPI.ts"],"names":[],"mappings":"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","sourcesContent":["import Cascade from \"../Cascade\";\nimport * as _ from \"lodash\";\nimport * as os from \"os\";\n\nclass WebAPI\n{\n    static webServer;\n\n    static initialize()\n    {\n        WebAPI.webServer = Cascade.requireProcess(\"WebServer\");\n\n        let server = WebAPI.webServer.server;\n\n        function getComponent(req, res, next)\n        {\n            let component = Cascade.components[req.params.componentID];\n            if(_.isNil(component))\n            {\n                res.send(404, \"Not Found\");\n                return;\n            }\n\n            req.params.component = component;\n            next();\n        }\n\n        function setComponentValue(req, res)\n        {\n            if(req.params.component.readOnly)\n            {\n                res.send(400, \"Component is Read Only\");\n                return;\n            }\n\n            let value = req.params.value || req.query.value;\n\n            if(_.isNil(value) && req.body)\n            {\n                value = _.isString(req.body) ? req.body : req.body.value;\n            }\n\n            if(!_.isNil(value))\n            {\n                req.params.component.value = value;\n            }\n\n            res.send(req.params.component.serialized());\n        }\n\n        server.get(\"/api\", (req, res) => {\n\n            let components = {};\n\n            _.each(Cascade.components, (component) => {\n                components[component.id] = component.serialized();\n            });\n\n            let ipAddresses = [];\n\n            let ifaces = os.networkInterfaces();\n            _.each(ifaces, function (ifaceArray) {\n                _.each(ifaceArray, function (iface) {\n                    if ('IPv4' !== iface.family || iface.internal !== false) {\n                        // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses\n                        return;\n                    }\n\n                    ipAddresses.push(iface.address);\n                })\n            });\n\n            let sysInfo = {\n                free_memory: os.freemem(),\n                load: os.loadavg(),\n                network: {\n                    hostname: os.hostname(),\n                    ip_addresses: ipAddresses\n                }\n            };\n\n            res.send({\n                system: sysInfo,\n                processes: Object.keys(Cascade.processes),\n                components: components\n            });\n        });\n\n        server.get(\"/api/components/:componentID\", getComponent, (req, res) => {\n            res.send(req.params.component.serialized());\n        });\n\n        server.post(\"/api/components/:componentID\", getComponent, setComponentValue);\n        server.post(\"/api/components/:componentID/:value\", getComponent, setComponentValue);\n    }\n}\n\nCascade.start(() => {\n    WebAPI.initialize();\n});\n\n"]}